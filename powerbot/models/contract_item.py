# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from powerbot.models.signal import Signal  # noqa: F401,E501


class ContractItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product': 'str',
        'contract_id': 'int',
        'revision_no': 'int',
        'state': 'str',
        'name': 'str',
        'delivery_start': 'datetime',
        'delivery_end': 'datetime',
        'contract_details': 'object',
        'relative_position': 'float',
        'absolute_position': 'float',
        'signals': 'list[Signal]'
    }

    attribute_map = {
        'product': 'product',
        'contract_id': 'contract_id',
        'revision_no': 'revision_no',
        'state': 'state',
        'name': 'name',
        'delivery_start': 'delivery_start',
        'delivery_end': 'delivery_end',
        'contract_details': 'contract_details',
        'relative_position': 'relative_position',
        'absolute_position': 'absolute_position',
        'signals': 'signals'
    }

    def __init__(self, product=None, contract_id=None, revision_no=None, state=None, name=None, delivery_start=None, delivery_end=None, contract_details=None, relative_position=None, absolute_position=None, signals=None):  # noqa: E501
        """ContractItem - a model defined in Swagger"""  # noqa: E501

        self._product = None
        self._contract_id = None
        self._revision_no = None
        self._state = None
        self._name = None
        self._delivery_start = None
        self._delivery_end = None
        self._contract_details = None
        self._relative_position = None
        self._absolute_position = None
        self._signals = None
        self.discriminator = None

        if product is not None:
            self.product = product
        if contract_id is not None:
            self.contract_id = contract_id
        if revision_no is not None:
            self.revision_no = revision_no
        if state is not None:
            self.state = state
        if name is not None:
            self.name = name
        if delivery_start is not None:
            self.delivery_start = delivery_start
        if delivery_end is not None:
            self.delivery_end = delivery_end
        if contract_details is not None:
            self.contract_details = contract_details
        if relative_position is not None:
            self.relative_position = relative_position
        if absolute_position is not None:
            self.absolute_position = absolute_position
        if signals is not None:
            self.signals = signals

    @property
    def product(self):
        """Gets the product of this ContractItem.  # noqa: E501


        :return: The product of this ContractItem.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this ContractItem.


        :param product: The product of this ContractItem.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def contract_id(self):
        """Gets the contract_id of this ContractItem.  # noqa: E501


        :return: The contract_id of this ContractItem.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this ContractItem.


        :param contract_id: The contract_id of this ContractItem.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def revision_no(self):
        """Gets the revision_no of this ContractItem.  # noqa: E501


        :return: The revision_no of this ContractItem.  # noqa: E501
        :rtype: int
        """
        return self._revision_no

    @revision_no.setter
    def revision_no(self, revision_no):
        """Sets the revision_no of this ContractItem.


        :param revision_no: The revision_no of this ContractItem.  # noqa: E501
        :type: int
        """

        self._revision_no = revision_no

    @property
    def state(self):
        """Gets the state of this ContractItem.  # noqa: E501


        :return: The state of this ContractItem.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContractItem.


        :param state: The state of this ContractItem.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def name(self):
        """Gets the name of this ContractItem.  # noqa: E501


        :return: The name of this ContractItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContractItem.


        :param name: The name of this ContractItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def delivery_start(self):
        """Gets the delivery_start of this ContractItem.  # noqa: E501


        :return: The delivery_start of this ContractItem.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_start

    @delivery_start.setter
    def delivery_start(self, delivery_start):
        """Sets the delivery_start of this ContractItem.


        :param delivery_start: The delivery_start of this ContractItem.  # noqa: E501
        :type: datetime
        """

        self._delivery_start = delivery_start

    @property
    def delivery_end(self):
        """Gets the delivery_end of this ContractItem.  # noqa: E501


        :return: The delivery_end of this ContractItem.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_end

    @delivery_end.setter
    def delivery_end(self, delivery_end):
        """Sets the delivery_end of this ContractItem.


        :param delivery_end: The delivery_end of this ContractItem.  # noqa: E501
        :type: datetime
        """

        self._delivery_end = delivery_end

    @property
    def contract_details(self):
        """Gets the contract_details of this ContractItem.  # noqa: E501


        :return: The contract_details of this ContractItem.  # noqa: E501
        :rtype: object
        """
        return self._contract_details

    @contract_details.setter
    def contract_details(self, contract_details):
        """Sets the contract_details of this ContractItem.


        :param contract_details: The contract_details of this ContractItem.  # noqa: E501
        :type: object
        """

        self._contract_details = contract_details

    @property
    def relative_position(self):
        """Gets the relative_position of this ContractItem.  # noqa: E501


        :return: The relative_position of this ContractItem.  # noqa: E501
        :rtype: float
        """
        return self._relative_position

    @relative_position.setter
    def relative_position(self, relative_position):
        """Sets the relative_position of this ContractItem.


        :param relative_position: The relative_position of this ContractItem.  # noqa: E501
        :type: float
        """

        self._relative_position = relative_position

    @property
    def absolute_position(self):
        """Gets the absolute_position of this ContractItem.  # noqa: E501


        :return: The absolute_position of this ContractItem.  # noqa: E501
        :rtype: float
        """
        return self._absolute_position

    @absolute_position.setter
    def absolute_position(self, absolute_position):
        """Sets the absolute_position of this ContractItem.


        :param absolute_position: The absolute_position of this ContractItem.  # noqa: E501
        :type: float
        """

        self._absolute_position = absolute_position

    @property
    def signals(self):
        """Gets the signals of this ContractItem.  # noqa: E501


        :return: The signals of this ContractItem.  # noqa: E501
        :rtype: list[Signal]
        """
        return self._signals

    @signals.setter
    def signals(self, signals):
        """Sets the signals of this ContractItem.


        :param signals: The signals of this ContractItem.  # noqa: E501
        :type: list[Signal]
        """

        self._signals = signals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
