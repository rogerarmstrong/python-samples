# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from powerbot.models.signal import Signal  # noqa: F401,E501
from powerbot.models.trade import Trade  # noqa: F401,E501


class ContractHistoryItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as_of': 'datetime',
        'revision_no': 'int',
        'vwap': 'float',
        'best_bid_price': 'float',
        'best_bid_quantity': 'float',
        'best_ask_price': 'float',
        'best_ask_quantity': 'float',
        'last_price': 'float',
        'last_quantity': 'float',
        'total_quantity': 'float',
        'auction_price': 'float',
        'high': 'float',
        'low': 'float',
        'signals': 'list[Signal]',
        'trades': 'list[Trade]'
    }

    attribute_map = {
        'as_of': 'as_of',
        'revision_no': 'revisionNo',
        'vwap': 'vwap',
        'best_bid_price': 'best_bid_price',
        'best_bid_quantity': 'best_bid_quantity',
        'best_ask_price': 'best_ask_price',
        'best_ask_quantity': 'best_ask_quantity',
        'last_price': 'last_price',
        'last_quantity': 'last_quantity',
        'total_quantity': 'total_quantity',
        'auction_price': 'auction_price',
        'high': 'high',
        'low': 'low',
        'signals': 'signals',
        'trades': 'trades'
    }

    def __init__(self, as_of=None, revision_no=None, vwap=None, best_bid_price=None, best_bid_quantity=None, best_ask_price=None, best_ask_quantity=None, last_price=None, last_quantity=None, total_quantity=None, auction_price=None, high=None, low=None, signals=None, trades=None):  # noqa: E501
        """ContractHistoryItem - a model defined in Swagger"""  # noqa: E501

        self._as_of = None
        self._revision_no = None
        self._vwap = None
        self._best_bid_price = None
        self._best_bid_quantity = None
        self._best_ask_price = None
        self._best_ask_quantity = None
        self._last_price = None
        self._last_quantity = None
        self._total_quantity = None
        self._auction_price = None
        self._high = None
        self._low = None
        self._signals = None
        self._trades = None
        self.discriminator = None

        if as_of is not None:
            self.as_of = as_of
        if revision_no is not None:
            self.revision_no = revision_no
        if vwap is not None:
            self.vwap = vwap
        if best_bid_price is not None:
            self.best_bid_price = best_bid_price
        if best_bid_quantity is not None:
            self.best_bid_quantity = best_bid_quantity
        if best_ask_price is not None:
            self.best_ask_price = best_ask_price
        if best_ask_quantity is not None:
            self.best_ask_quantity = best_ask_quantity
        if last_price is not None:
            self.last_price = last_price
        if last_quantity is not None:
            self.last_quantity = last_quantity
        if total_quantity is not None:
            self.total_quantity = total_quantity
        if auction_price is not None:
            self.auction_price = auction_price
        if high is not None:
            self.high = high
        if low is not None:
            self.low = low
        if signals is not None:
            self.signals = signals
        if trades is not None:
            self.trades = trades

    @property
    def as_of(self):
        """Gets the as_of of this ContractHistoryItem.  # noqa: E501


        :return: The as_of of this ContractHistoryItem.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of

    @as_of.setter
    def as_of(self, as_of):
        """Sets the as_of of this ContractHistoryItem.


        :param as_of: The as_of of this ContractHistoryItem.  # noqa: E501
        :type: datetime
        """

        self._as_of = as_of

    @property
    def revision_no(self):
        """Gets the revision_no of this ContractHistoryItem.  # noqa: E501


        :return: The revision_no of this ContractHistoryItem.  # noqa: E501
        :rtype: int
        """
        return self._revision_no

    @revision_no.setter
    def revision_no(self, revision_no):
        """Sets the revision_no of this ContractHistoryItem.


        :param revision_no: The revision_no of this ContractHistoryItem.  # noqa: E501
        :type: int
        """

        self._revision_no = revision_no

    @property
    def vwap(self):
        """Gets the vwap of this ContractHistoryItem.  # noqa: E501


        :return: The vwap of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._vwap

    @vwap.setter
    def vwap(self, vwap):
        """Sets the vwap of this ContractHistoryItem.


        :param vwap: The vwap of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._vwap = vwap

    @property
    def best_bid_price(self):
        """Gets the best_bid_price of this ContractHistoryItem.  # noqa: E501


        :return: The best_bid_price of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._best_bid_price

    @best_bid_price.setter
    def best_bid_price(self, best_bid_price):
        """Sets the best_bid_price of this ContractHistoryItem.


        :param best_bid_price: The best_bid_price of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._best_bid_price = best_bid_price

    @property
    def best_bid_quantity(self):
        """Gets the best_bid_quantity of this ContractHistoryItem.  # noqa: E501


        :return: The best_bid_quantity of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._best_bid_quantity

    @best_bid_quantity.setter
    def best_bid_quantity(self, best_bid_quantity):
        """Sets the best_bid_quantity of this ContractHistoryItem.


        :param best_bid_quantity: The best_bid_quantity of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._best_bid_quantity = best_bid_quantity

    @property
    def best_ask_price(self):
        """Gets the best_ask_price of this ContractHistoryItem.  # noqa: E501


        :return: The best_ask_price of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._best_ask_price

    @best_ask_price.setter
    def best_ask_price(self, best_ask_price):
        """Sets the best_ask_price of this ContractHistoryItem.


        :param best_ask_price: The best_ask_price of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._best_ask_price = best_ask_price

    @property
    def best_ask_quantity(self):
        """Gets the best_ask_quantity of this ContractHistoryItem.  # noqa: E501


        :return: The best_ask_quantity of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._best_ask_quantity

    @best_ask_quantity.setter
    def best_ask_quantity(self, best_ask_quantity):
        """Sets the best_ask_quantity of this ContractHistoryItem.


        :param best_ask_quantity: The best_ask_quantity of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._best_ask_quantity = best_ask_quantity

    @property
    def last_price(self):
        """Gets the last_price of this ContractHistoryItem.  # noqa: E501


        :return: The last_price of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this ContractHistoryItem.


        :param last_price: The last_price of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._last_price = last_price

    @property
    def last_quantity(self):
        """Gets the last_quantity of this ContractHistoryItem.  # noqa: E501


        :return: The last_quantity of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._last_quantity

    @last_quantity.setter
    def last_quantity(self, last_quantity):
        """Sets the last_quantity of this ContractHistoryItem.


        :param last_quantity: The last_quantity of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._last_quantity = last_quantity

    @property
    def total_quantity(self):
        """Gets the total_quantity of this ContractHistoryItem.  # noqa: E501


        :return: The total_quantity of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this ContractHistoryItem.


        :param total_quantity: The total_quantity of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._total_quantity = total_quantity

    @property
    def auction_price(self):
        """Gets the auction_price of this ContractHistoryItem.  # noqa: E501


        :return: The auction_price of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._auction_price

    @auction_price.setter
    def auction_price(self, auction_price):
        """Sets the auction_price of this ContractHistoryItem.


        :param auction_price: The auction_price of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._auction_price = auction_price

    @property
    def high(self):
        """Gets the high of this ContractHistoryItem.  # noqa: E501


        :return: The high of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this ContractHistoryItem.


        :param high: The high of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def low(self):
        """Gets the low of this ContractHistoryItem.  # noqa: E501


        :return: The low of this ContractHistoryItem.  # noqa: E501
        :rtype: float
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this ContractHistoryItem.


        :param low: The low of this ContractHistoryItem.  # noqa: E501
        :type: float
        """

        self._low = low

    @property
    def signals(self):
        """Gets the signals of this ContractHistoryItem.  # noqa: E501

        Signals valid as of the current point in time.  # noqa: E501

        :return: The signals of this ContractHistoryItem.  # noqa: E501
        :rtype: list[Signal]
        """
        return self._signals

    @signals.setter
    def signals(self, signals):
        """Sets the signals of this ContractHistoryItem.

        Signals valid as of the current point in time.  # noqa: E501

        :param signals: The signals of this ContractHistoryItem.  # noqa: E501
        :type: list[Signal]
        """

        self._signals = signals

    @property
    def trades(self):
        """Gets the trades of this ContractHistoryItem.  # noqa: E501

        Lists the trades which happend since the previous point in time.  # noqa: E501

        :return: The trades of this ContractHistoryItem.  # noqa: E501
        :rtype: list[Trade]
        """
        return self._trades

    @trades.setter
    def trades(self, trades):
        """Sets the trades of this ContractHistoryItem.

        Lists the trades which happend since the previous point in time.  # noqa: E501

        :param trades: The trades of this ContractHistoryItem.  # noqa: E501
        :type: list[Trade]
        """

        self._trades = trades

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContractHistoryItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
