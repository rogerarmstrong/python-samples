# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OrderEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'side': 'str',
        'prod': 'str',
        'quantity': 'float',
        'price': 'float',
        'display_qty': 'int',
        'contract_id': 'int',
        'contract_name': 'str',
        'cl_ordr_id': 'str',
        'clearing_acct_type': 'str',
        'ordr_exe_restriction': 'str',
        'pre_arranged': 'bool',
        'pre_arranged_acct': 'str',
        'type': 'str',
        'validity_res': 'str',
        'state': 'str',
        'validity_date': 'datetime',
        'txt': 'str',
        'ppd': 'int',
        'dlvry_start': 'datetime',
        'dlvry_end': 'datetime'
    }

    attribute_map = {
        'side': 'side',
        'prod': 'prod',
        'quantity': 'quantity',
        'price': 'price',
        'display_qty': 'displayQty',
        'contract_id': 'contractId',
        'contract_name': 'contractName',
        'cl_ordr_id': 'clOrdrId',
        'clearing_acct_type': 'clearingAcctType',
        'ordr_exe_restriction': 'ordrExeRestriction',
        'pre_arranged': 'preArranged',
        'pre_arranged_acct': 'preArrangedAcct',
        'type': 'type',
        'validity_res': 'validityRes',
        'state': 'state',
        'validity_date': 'validityDate',
        'txt': 'txt',
        'ppd': 'ppd',
        'dlvry_start': 'dlvryStart',
        'dlvry_end': 'dlvryEnd'
    }

    def __init__(self, side=None, prod=None, quantity=None, price=None, display_qty=None, contract_id=None, contract_name=None, cl_ordr_id=None, clearing_acct_type=None, ordr_exe_restriction='NON', pre_arranged=False, pre_arranged_acct=None, type='O', validity_res='GFS', state=None, validity_date=None, txt=None, ppd=None, dlvry_start=None, dlvry_end=None):  # noqa: E501
        """OrderEntry - a model defined in Swagger"""  # noqa: E501

        self._side = None
        self._prod = None
        self._quantity = None
        self._price = None
        self._display_qty = None
        self._contract_id = None
        self._contract_name = None
        self._cl_ordr_id = None
        self._clearing_acct_type = None
        self._ordr_exe_restriction = None
        self._pre_arranged = None
        self._pre_arranged_acct = None
        self._type = None
        self._validity_res = None
        self._state = None
        self._validity_date = None
        self._txt = None
        self._ppd = None
        self._dlvry_start = None
        self._dlvry_end = None
        self.discriminator = None

        if side is not None:
            self.side = side
        self.prod = prod
        self.quantity = quantity
        self.price = price
        if display_qty is not None:
            self.display_qty = display_qty
        if contract_id is not None:
            self.contract_id = contract_id
        if contract_name is not None:
            self.contract_name = contract_name
        if cl_ordr_id is not None:
            self.cl_ordr_id = cl_ordr_id
        self.clearing_acct_type = clearing_acct_type
        if ordr_exe_restriction is not None:
            self.ordr_exe_restriction = ordr_exe_restriction
        if pre_arranged is not None:
            self.pre_arranged = pre_arranged
        if pre_arranged_acct is not None:
            self.pre_arranged_acct = pre_arranged_acct
        if type is not None:
            self.type = type
        if validity_res is not None:
            self.validity_res = validity_res
        if state is not None:
            self.state = state
        if validity_date is not None:
            self.validity_date = validity_date
        if txt is not None:
            self.txt = txt
        if ppd is not None:
            self.ppd = ppd
        if dlvry_start is not None:
            self.dlvry_start = dlvry_start
        if dlvry_end is not None:
            self.dlvry_end = dlvry_end

    @property
    def side(self):
        """Gets the side of this OrderEntry.  # noqa: E501


        :return: The side of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._side

    @side.setter
    def side(self, side):
        """Sets the side of this OrderEntry.


        :param side: The side of this OrderEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["SELL", "BUY"]  # noqa: E501
        if side not in allowed_values:
            raise ValueError(
                "Invalid value for `side` ({0}), must be one of {1}"  # noqa: E501
                .format(side, allowed_values)
            )

        self._side = side

    @property
    def prod(self):
        """Gets the prod of this OrderEntry.  # noqa: E501


        :return: The prod of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._prod

    @prod.setter
    def prod(self, prod):
        """Sets the prod of this OrderEntry.


        :param prod: The prod of this OrderEntry.  # noqa: E501
        :type: str
        """
        if prod is None:
            raise ValueError("Invalid value for `prod`, must not be `None`")  # noqa: E501

        self._prod = prod

    @property
    def quantity(self):
        """Gets the quantity of this OrderEntry.  # noqa: E501


        :return: The quantity of this OrderEntry.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderEntry.


        :param quantity: The quantity of this OrderEntry.  # noqa: E501
        :type: float
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this OrderEntry.  # noqa: E501


        :return: The price of this OrderEntry.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this OrderEntry.


        :param price: The price of this OrderEntry.  # noqa: E501
        :type: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def display_qty(self):
        """Gets the display_qty of this OrderEntry.  # noqa: E501


        :return: The display_qty of this OrderEntry.  # noqa: E501
        :rtype: int
        """
        return self._display_qty

    @display_qty.setter
    def display_qty(self, display_qty):
        """Sets the display_qty of this OrderEntry.


        :param display_qty: The display_qty of this OrderEntry.  # noqa: E501
        :type: int
        """

        self._display_qty = display_qty

    @property
    def contract_id(self):
        """Gets the contract_id of this OrderEntry.  # noqa: E501


        :return: The contract_id of this OrderEntry.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this OrderEntry.


        :param contract_id: The contract_id of this OrderEntry.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def contract_name(self):
        """Gets the contract_name of this OrderEntry.  # noqa: E501

        Set a contract name instead of the contractId, and the attempt is made to look up the contract via it's name. If contractId is ist, the contractName field is ignored.  # noqa: E501

        :return: The contract_name of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._contract_name

    @contract_name.setter
    def contract_name(self, contract_name):
        """Sets the contract_name of this OrderEntry.

        Set a contract name instead of the contractId, and the attempt is made to look up the contract via it's name. If contractId is ist, the contractName field is ignored.  # noqa: E501

        :param contract_name: The contract_name of this OrderEntry.  # noqa: E501
        :type: str
        """

        self._contract_name = contract_name

    @property
    def cl_ordr_id(self):
        """Gets the cl_ordr_id of this OrderEntry.  # noqa: E501


        :return: The cl_ordr_id of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._cl_ordr_id

    @cl_ordr_id.setter
    def cl_ordr_id(self, cl_ordr_id):
        """Sets the cl_ordr_id of this OrderEntry.


        :param cl_ordr_id: The cl_ordr_id of this OrderEntry.  # noqa: E501
        :type: str
        """
        if cl_ordr_id is not None and len(cl_ordr_id) > 40:
            raise ValueError("Invalid value for `cl_ordr_id`, length must be less than or equal to `40`")  # noqa: E501

        self._cl_ordr_id = cl_ordr_id

    @property
    def clearing_acct_type(self):
        """Gets the clearing_acct_type of this OrderEntry.  # noqa: E501


        :return: The clearing_acct_type of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._clearing_acct_type

    @clearing_acct_type.setter
    def clearing_acct_type(self, clearing_acct_type):
        """Sets the clearing_acct_type of this OrderEntry.


        :param clearing_acct_type: The clearing_acct_type of this OrderEntry.  # noqa: E501
        :type: str
        """
        if clearing_acct_type is None:
            raise ValueError("Invalid value for `clearing_acct_type`, must not be `None`")  # noqa: E501

        self._clearing_acct_type = clearing_acct_type

    @property
    def ordr_exe_restriction(self):
        """Gets the ordr_exe_restriction of this OrderEntry.  # noqa: E501


        :return: The ordr_exe_restriction of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._ordr_exe_restriction

    @ordr_exe_restriction.setter
    def ordr_exe_restriction(self, ordr_exe_restriction):
        """Sets the ordr_exe_restriction of this OrderEntry.


        :param ordr_exe_restriction: The ordr_exe_restriction of this OrderEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["FOK", "IOC", "NON", "AON", "AU"]  # noqa: E501
        if ordr_exe_restriction not in allowed_values:
            raise ValueError(
                "Invalid value for `ordr_exe_restriction` ({0}), must be one of {1}"  # noqa: E501
                .format(ordr_exe_restriction, allowed_values)
            )

        self._ordr_exe_restriction = ordr_exe_restriction

    @property
    def pre_arranged(self):
        """Gets the pre_arranged of this OrderEntry.  # noqa: E501


        :return: The pre_arranged of this OrderEntry.  # noqa: E501
        :rtype: bool
        """
        return self._pre_arranged

    @pre_arranged.setter
    def pre_arranged(self, pre_arranged):
        """Sets the pre_arranged of this OrderEntry.


        :param pre_arranged: The pre_arranged of this OrderEntry.  # noqa: E501
        :type: bool
        """

        self._pre_arranged = pre_arranged

    @property
    def pre_arranged_acct(self):
        """Gets the pre_arranged_acct of this OrderEntry.  # noqa: E501


        :return: The pre_arranged_acct of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._pre_arranged_acct

    @pre_arranged_acct.setter
    def pre_arranged_acct(self, pre_arranged_acct):
        """Sets the pre_arranged_acct of this OrderEntry.


        :param pre_arranged_acct: The pre_arranged_acct of this OrderEntry.  # noqa: E501
        :type: str
        """

        self._pre_arranged_acct = pre_arranged_acct

    @property
    def type(self):
        """Gets the type of this OrderEntry.  # noqa: E501


        :return: The type of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderEntry.


        :param type: The type of this OrderEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["B", "O", "I", "L", "S", "H", "C", "N", "E"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def validity_res(self):
        """Gets the validity_res of this OrderEntry.  # noqa: E501


        :return: The validity_res of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._validity_res

    @validity_res.setter
    def validity_res(self, validity_res):
        """Sets the validity_res of this OrderEntry.


        :param validity_res: The validity_res of this OrderEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["GFS", "GTD", "NON"]  # noqa: E501
        if validity_res not in allowed_values:
            raise ValueError(
                "Invalid value for `validity_res` ({0}), must be one of {1}"  # noqa: E501
                .format(validity_res, allowed_values)
            )

        self._validity_res = validity_res

    @property
    def state(self):
        """Gets the state of this OrderEntry.  # noqa: E501


        :return: The state of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OrderEntry.


        :param state: The state of this OrderEntry.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTI", "HIBE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def validity_date(self):
        """Gets the validity_date of this OrderEntry.  # noqa: E501


        :return: The validity_date of this OrderEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._validity_date

    @validity_date.setter
    def validity_date(self, validity_date):
        """Sets the validity_date of this OrderEntry.


        :param validity_date: The validity_date of this OrderEntry.  # noqa: E501
        :type: datetime
        """

        self._validity_date = validity_date

    @property
    def txt(self):
        """Gets the txt of this OrderEntry.  # noqa: E501


        :return: The txt of this OrderEntry.  # noqa: E501
        :rtype: str
        """
        return self._txt

    @txt.setter
    def txt(self, txt):
        """Sets the txt of this OrderEntry.


        :param txt: The txt of this OrderEntry.  # noqa: E501
        :type: str
        """
        if txt is not None and len(txt) > 250:
            raise ValueError("Invalid value for `txt`, length must be less than or equal to `250`")  # noqa: E501

        self._txt = txt

    @property
    def ppd(self):
        """Gets the ppd of this OrderEntry.  # noqa: E501


        :return: The ppd of this OrderEntry.  # noqa: E501
        :rtype: int
        """
        return self._ppd

    @ppd.setter
    def ppd(self, ppd):
        """Sets the ppd of this OrderEntry.


        :param ppd: The ppd of this OrderEntry.  # noqa: E501
        :type: int
        """

        self._ppd = ppd

    @property
    def dlvry_start(self):
        """Gets the dlvry_start of this OrderEntry.  # noqa: E501


        :return: The dlvry_start of this OrderEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._dlvry_start

    @dlvry_start.setter
    def dlvry_start(self, dlvry_start):
        """Sets the dlvry_start of this OrderEntry.


        :param dlvry_start: The dlvry_start of this OrderEntry.  # noqa: E501
        :type: datetime
        """

        self._dlvry_start = dlvry_start

    @property
    def dlvry_end(self):
        """Gets the dlvry_end of this OrderEntry.  # noqa: E501


        :return: The dlvry_end of this OrderEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._dlvry_end

    @dlvry_end.setter
    def dlvry_end(self, dlvry_end):
        """Sets the dlvry_end of this OrderEntry.


        :param dlvry_end: The dlvry_end of this OrderEntry.  # noqa: E501
        :type: datetime
        """

        self._dlvry_end = dlvry_end

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
