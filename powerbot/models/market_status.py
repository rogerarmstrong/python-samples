# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from powerbot.models.market_options import MarketOptions  # noqa: F401,E501


class MarketStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_timestamp': 'datetime',
        'status': 'str',
        'options': 'MarketOptions',
        'urls': 'list[str]',
        'session_id': 'int',
        'logged_in_since': 'datetime',
        'heartbeat_as_of': 'datetime',
        'heartbeat_content': 'str',
        'messages': 'list[str]'
    }

    attribute_map = {
        'api_timestamp': 'api_timestamp',
        'status': 'status',
        'options': 'options',
        'urls': 'urls',
        'session_id': 'session_id',
        'logged_in_since': 'logged_in_since',
        'heartbeat_as_of': 'heartbeat_as_of',
        'heartbeat_content': 'heartbeat_content',
        'messages': 'messages'
    }

    def __init__(self, api_timestamp=None, status=None, options=None, urls=None, session_id=None, logged_in_since=None, heartbeat_as_of=None, heartbeat_content=None, messages=None):  # noqa: E501
        """MarketStatus - a model defined in Swagger"""  # noqa: E501

        self._api_timestamp = None
        self._status = None
        self._options = None
        self._urls = None
        self._session_id = None
        self._logged_in_since = None
        self._heartbeat_as_of = None
        self._heartbeat_content = None
        self._messages = None
        self.discriminator = None

        if api_timestamp is not None:
            self.api_timestamp = api_timestamp
        self.status = status
        if options is not None:
            self.options = options
        if urls is not None:
            self.urls = urls
        if session_id is not None:
            self.session_id = session_id
        if logged_in_since is not None:
            self.logged_in_since = logged_in_since
        if heartbeat_as_of is not None:
            self.heartbeat_as_of = heartbeat_as_of
        if heartbeat_content is not None:
            self.heartbeat_content = heartbeat_content
        if messages is not None:
            self.messages = messages

    @property
    def api_timestamp(self):
        """Gets the api_timestamp of this MarketStatus.  # noqa: E501


        :return: The api_timestamp of this MarketStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._api_timestamp

    @api_timestamp.setter
    def api_timestamp(self, api_timestamp):
        """Sets the api_timestamp of this MarketStatus.


        :param api_timestamp: The api_timestamp of this MarketStatus.  # noqa: E501
        :type: datetime
        """

        self._api_timestamp = api_timestamp

    @property
    def status(self):
        """Gets the status of this MarketStatus.  # noqa: E501


        :return: The status of this MarketStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MarketStatus.


        :param status: The status of this MarketStatus.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["OK", "WARNING", "FAILURE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def options(self):
        """Gets the options of this MarketStatus.  # noqa: E501


        :return: The options of this MarketStatus.  # noqa: E501
        :rtype: MarketOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this MarketStatus.


        :param options: The options of this MarketStatus.  # noqa: E501
        :type: MarketOptions
        """

        self._options = options

    @property
    def urls(self):
        """Gets the urls of this MarketStatus.  # noqa: E501


        :return: The urls of this MarketStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this MarketStatus.


        :param urls: The urls of this MarketStatus.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    @property
    def session_id(self):
        """Gets the session_id of this MarketStatus.  # noqa: E501


        :return: The session_id of this MarketStatus.  # noqa: E501
        :rtype: int
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this MarketStatus.


        :param session_id: The session_id of this MarketStatus.  # noqa: E501
        :type: int
        """

        self._session_id = session_id

    @property
    def logged_in_since(self):
        """Gets the logged_in_since of this MarketStatus.  # noqa: E501


        :return: The logged_in_since of this MarketStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._logged_in_since

    @logged_in_since.setter
    def logged_in_since(self, logged_in_since):
        """Sets the logged_in_since of this MarketStatus.


        :param logged_in_since: The logged_in_since of this MarketStatus.  # noqa: E501
        :type: datetime
        """

        self._logged_in_since = logged_in_since

    @property
    def heartbeat_as_of(self):
        """Gets the heartbeat_as_of of this MarketStatus.  # noqa: E501


        :return: The heartbeat_as_of of this MarketStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._heartbeat_as_of

    @heartbeat_as_of.setter
    def heartbeat_as_of(self, heartbeat_as_of):
        """Sets the heartbeat_as_of of this MarketStatus.


        :param heartbeat_as_of: The heartbeat_as_of of this MarketStatus.  # noqa: E501
        :type: datetime
        """

        self._heartbeat_as_of = heartbeat_as_of

    @property
    def heartbeat_content(self):
        """Gets the heartbeat_content of this MarketStatus.  # noqa: E501


        :return: The heartbeat_content of this MarketStatus.  # noqa: E501
        :rtype: str
        """
        return self._heartbeat_content

    @heartbeat_content.setter
    def heartbeat_content(self, heartbeat_content):
        """Sets the heartbeat_content of this MarketStatus.


        :param heartbeat_content: The heartbeat_content of this MarketStatus.  # noqa: E501
        :type: str
        """

        self._heartbeat_content = heartbeat_content

    @property
    def messages(self):
        """Gets the messages of this MarketStatus.  # noqa: E501


        :return: The messages of this MarketStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this MarketStatus.


        :param messages: The messages of this MarketStatus.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
