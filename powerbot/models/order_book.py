# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from powerbot.models.contract import Contract  # noqa: F401,E501


class OrderBook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product': 'str',
        'product_details': 'object',
        'delivery_area': 'str',
        'price_currency': 'str',
        'quantity_unit': 'str',
        'contracts': 'list[Contract]'
    }

    attribute_map = {
        'product': 'product',
        'product_details': 'product_details',
        'delivery_area': 'delivery_area',
        'price_currency': 'price_currency',
        'quantity_unit': 'quantity_unit',
        'contracts': 'contracts'
    }

    def __init__(self, product=None, product_details=None, delivery_area=None, price_currency=None, quantity_unit=None, contracts=None):  # noqa: E501
        """OrderBook - a model defined in Swagger"""  # noqa: E501

        self._product = None
        self._product_details = None
        self._delivery_area = None
        self._price_currency = None
        self._quantity_unit = None
        self._contracts = None
        self.discriminator = None

        if product is not None:
            self.product = product
        if product_details is not None:
            self.product_details = product_details
        if delivery_area is not None:
            self.delivery_area = delivery_area
        if price_currency is not None:
            self.price_currency = price_currency
        if quantity_unit is not None:
            self.quantity_unit = quantity_unit
        if contracts is not None:
            self.contracts = contracts

    @property
    def product(self):
        """Gets the product of this OrderBook.  # noqa: E501


        :return: The product of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this OrderBook.


        :param product: The product of this OrderBook.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def product_details(self):
        """Gets the product_details of this OrderBook.  # noqa: E501


        :return: The product_details of this OrderBook.  # noqa: E501
        :rtype: object
        """
        return self._product_details

    @product_details.setter
    def product_details(self, product_details):
        """Sets the product_details of this OrderBook.


        :param product_details: The product_details of this OrderBook.  # noqa: E501
        :type: object
        """

        self._product_details = product_details

    @property
    def delivery_area(self):
        """Gets the delivery_area of this OrderBook.  # noqa: E501


        :return: The delivery_area of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._delivery_area

    @delivery_area.setter
    def delivery_area(self, delivery_area):
        """Sets the delivery_area of this OrderBook.


        :param delivery_area: The delivery_area of this OrderBook.  # noqa: E501
        :type: str
        """

        self._delivery_area = delivery_area

    @property
    def price_currency(self):
        """Gets the price_currency of this OrderBook.  # noqa: E501


        :return: The price_currency of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this OrderBook.


        :param price_currency: The price_currency of this OrderBook.  # noqa: E501
        :type: str
        """

        self._price_currency = price_currency

    @property
    def quantity_unit(self):
        """Gets the quantity_unit of this OrderBook.  # noqa: E501


        :return: The quantity_unit of this OrderBook.  # noqa: E501
        :rtype: str
        """
        return self._quantity_unit

    @quantity_unit.setter
    def quantity_unit(self, quantity_unit):
        """Sets the quantity_unit of this OrderBook.


        :param quantity_unit: The quantity_unit of this OrderBook.  # noqa: E501
        :type: str
        """

        self._quantity_unit = quantity_unit

    @property
    def contracts(self):
        """Gets the contracts of this OrderBook.  # noqa: E501


        :return: The contracts of this OrderBook.  # noqa: E501
        :rtype: list[Contract]
        """
        return self._contracts

    @contracts.setter
    def contracts(self, contracts):
        """Sets the contracts of this OrderBook.


        :param contracts: The contracts of this OrderBook.  # noqa: E501
        :type: list[Contract]
        """

        self._contracts = contracts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderBook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
