# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiKeyDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'epex_password': 'str',
        'name': 'str',
        'can_trade': 'bool',
        'can_signal': 'bool'
    }

    attribute_map = {
        'epex_password': 'epex_password',
        'name': 'name',
        'can_trade': 'can_trade',
        'can_signal': 'can_signal'
    }

    def __init__(self, epex_password=None, name=None, can_trade=None, can_signal=None):  # noqa: E501
        """ApiKeyDescription - a model defined in Swagger"""  # noqa: E501

        self._epex_password = None
        self._name = None
        self._can_trade = None
        self._can_signal = None
        self.discriminator = None

        if epex_password is not None:
            self.epex_password = epex_password
        self.name = name
        if can_trade is not None:
            self.can_trade = can_trade
        if can_signal is not None:
            self.can_signal = can_signal

    @property
    def epex_password(self):
        """Gets the epex_password of this ApiKeyDescription.  # noqa: E501


        :return: The epex_password of this ApiKeyDescription.  # noqa: E501
        :rtype: str
        """
        return self._epex_password

    @epex_password.setter
    def epex_password(self, epex_password):
        """Sets the epex_password of this ApiKeyDescription.


        :param epex_password: The epex_password of this ApiKeyDescription.  # noqa: E501
        :type: str
        """

        self._epex_password = epex_password

    @property
    def name(self):
        """Gets the name of this ApiKeyDescription.  # noqa: E501


        :return: The name of this ApiKeyDescription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiKeyDescription.


        :param name: The name of this ApiKeyDescription.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def can_trade(self):
        """Gets the can_trade of this ApiKeyDescription.  # noqa: E501


        :return: The can_trade of this ApiKeyDescription.  # noqa: E501
        :rtype: bool
        """
        return self._can_trade

    @can_trade.setter
    def can_trade(self, can_trade):
        """Sets the can_trade of this ApiKeyDescription.


        :param can_trade: The can_trade of this ApiKeyDescription.  # noqa: E501
        :type: bool
        """

        self._can_trade = can_trade

    @property
    def can_signal(self):
        """Gets the can_signal of this ApiKeyDescription.  # noqa: E501


        :return: The can_signal of this ApiKeyDescription.  # noqa: E501
        :rtype: bool
        """
        return self._can_signal

    @can_signal.setter
    def can_signal(self, can_signal):
        """Sets the can_signal of this ApiKeyDescription.


        :param can_signal: The can_signal of this ApiKeyDescription.  # noqa: E501
        :type: bool
        """

        self._can_signal = can_signal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiKeyDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
