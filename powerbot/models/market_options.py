# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MarketOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'relative_position_limit': 'int',
        'absolute_position_limit': 'int'
    }

    attribute_map = {
        'relative_position_limit': 'relative_position_limit',
        'absolute_position_limit': 'absolute_position_limit'
    }

    def __init__(self, relative_position_limit=None, absolute_position_limit=None):  # noqa: E501
        """MarketOptions - a model defined in Swagger"""  # noqa: E501

        self._relative_position_limit = None
        self._absolute_position_limit = None
        self.discriminator = None

        if relative_position_limit is not None:
            self.relative_position_limit = relative_position_limit
        if absolute_position_limit is not None:
            self.absolute_position_limit = absolute_position_limit

    @property
    def relative_position_limit(self):
        """Gets the relative_position_limit of this MarketOptions.  # noqa: E501

        Releative position limt (per contract)  in MW  # noqa: E501

        :return: The relative_position_limit of this MarketOptions.  # noqa: E501
        :rtype: int
        """
        return self._relative_position_limit

    @relative_position_limit.setter
    def relative_position_limit(self, relative_position_limit):
        """Sets the relative_position_limit of this MarketOptions.

        Releative position limt (per contract)  in MW  # noqa: E501

        :param relative_position_limit: The relative_position_limit of this MarketOptions.  # noqa: E501
        :type: int
        """
        if relative_position_limit is not None and relative_position_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `relative_position_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._relative_position_limit = relative_position_limit

    @property
    def absolute_position_limit(self):
        """Gets the absolute_position_limit of this MarketOptions.  # noqa: E501

        Absolute position limt (per contract)  in MW  # noqa: E501

        :return: The absolute_position_limit of this MarketOptions.  # noqa: E501
        :rtype: int
        """
        return self._absolute_position_limit

    @absolute_position_limit.setter
    def absolute_position_limit(self, absolute_position_limit):
        """Sets the absolute_position_limit of this MarketOptions.

        Absolute position limt (per contract)  in MW  # noqa: E501

        :param absolute_position_limit: The absolute_position_limit of this MarketOptions.  # noqa: E501
        :type: int
        """
        if absolute_position_limit is not None and absolute_position_limit < 0:  # noqa: E501
            raise ValueError("Invalid value for `absolute_position_limit`, must be a value greater than or equal to `0`")  # noqa: E501

        self._absolute_position_limit = absolute_position_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
