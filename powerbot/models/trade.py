# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trade_id': 'int',
        'state': 'str',
        'delivery_area': 'str',
        'api_timestamp': 'datetime',
        'exec_time': 'datetime',
        'buy': 'bool',
        'sell': 'bool',
        'buy_order_id': 'int',
        'buy_delivery_area': 'str',
        'buy_cl_oder_id': 'str',
        'buy_txt': 'str',
        'buy_user_code': 'str',
        'buy_member_id': 'str',
        'buy_aggressor_indicator': 'str',
        'sell_order_id': 'int',
        'sell_delivery_area': 'str',
        'sell_cl_oder_id': 'str',
        'sell_txt': 'str',
        'sell_user_code': 'str',
        'sell_member_id': 'str',
        'sell_aggressor_indicator': 'str',
        'contract_id': 'int',
        'contract_name': 'str',
        'delivery_start': 'datetime',
        'delivery_end': 'datetime',
        'price': 'float',
        'quantity': 'float',
        'trade_details': 'object',
        'contract_details': 'object'
    }

    attribute_map = {
        'trade_id': 'trade_id',
        'state': 'state',
        'delivery_area': 'delivery_area',
        'api_timestamp': 'api_timestamp',
        'exec_time': 'exec_time',
        'buy': 'buy',
        'sell': 'sell',
        'buy_order_id': 'buy_order_id',
        'buy_delivery_area': 'buy_delivery_area',
        'buy_cl_oder_id': 'buy_clOderId',
        'buy_txt': 'buy_txt',
        'buy_user_code': 'buy_user_code',
        'buy_member_id': 'buy_member_id',
        'buy_aggressor_indicator': 'buy_aggressor_indicator',
        'sell_order_id': 'sell_order_id',
        'sell_delivery_area': 'sell_delivery_area',
        'sell_cl_oder_id': 'sell_clOderId',
        'sell_txt': 'sell_txt',
        'sell_user_code': 'sell_user_code',
        'sell_member_id': 'sell_member_id',
        'sell_aggressor_indicator': 'sell_aggressor_indicator',
        'contract_id': 'contract_id',
        'contract_name': 'contract_name',
        'delivery_start': 'delivery_start',
        'delivery_end': 'delivery_end',
        'price': 'price',
        'quantity': 'quantity',
        'trade_details': 'trade_details',
        'contract_details': 'contract_details'
    }

    def __init__(self, trade_id=None, state=None, delivery_area=None, api_timestamp=None, exec_time=None, buy=None, sell=None, buy_order_id=None, buy_delivery_area=None, buy_cl_oder_id=None, buy_txt=None, buy_user_code=None, buy_member_id=None, buy_aggressor_indicator=None, sell_order_id=None, sell_delivery_area=None, sell_cl_oder_id=None, sell_txt=None, sell_user_code=None, sell_member_id=None, sell_aggressor_indicator=None, contract_id=None, contract_name=None, delivery_start=None, delivery_end=None, price=None, quantity=None, trade_details=None, contract_details=None):  # noqa: E501
        """Trade - a model defined in Swagger"""  # noqa: E501

        self._trade_id = None
        self._state = None
        self._delivery_area = None
        self._api_timestamp = None
        self._exec_time = None
        self._buy = None
        self._sell = None
        self._buy_order_id = None
        self._buy_delivery_area = None
        self._buy_cl_oder_id = None
        self._buy_txt = None
        self._buy_user_code = None
        self._buy_member_id = None
        self._buy_aggressor_indicator = None
        self._sell_order_id = None
        self._sell_delivery_area = None
        self._sell_cl_oder_id = None
        self._sell_txt = None
        self._sell_user_code = None
        self._sell_member_id = None
        self._sell_aggressor_indicator = None
        self._contract_id = None
        self._contract_name = None
        self._delivery_start = None
        self._delivery_end = None
        self._price = None
        self._quantity = None
        self._trade_details = None
        self._contract_details = None
        self.discriminator = None

        if trade_id is not None:
            self.trade_id = trade_id
        if state is not None:
            self.state = state
        if delivery_area is not None:
            self.delivery_area = delivery_area
        if api_timestamp is not None:
            self.api_timestamp = api_timestamp
        if exec_time is not None:
            self.exec_time = exec_time
        if buy is not None:
            self.buy = buy
        if sell is not None:
            self.sell = sell
        if buy_order_id is not None:
            self.buy_order_id = buy_order_id
        if buy_delivery_area is not None:
            self.buy_delivery_area = buy_delivery_area
        if buy_cl_oder_id is not None:
            self.buy_cl_oder_id = buy_cl_oder_id
        if buy_txt is not None:
            self.buy_txt = buy_txt
        if buy_user_code is not None:
            self.buy_user_code = buy_user_code
        if buy_member_id is not None:
            self.buy_member_id = buy_member_id
        if buy_aggressor_indicator is not None:
            self.buy_aggressor_indicator = buy_aggressor_indicator
        if sell_order_id is not None:
            self.sell_order_id = sell_order_id
        if sell_delivery_area is not None:
            self.sell_delivery_area = sell_delivery_area
        if sell_cl_oder_id is not None:
            self.sell_cl_oder_id = sell_cl_oder_id
        if sell_txt is not None:
            self.sell_txt = sell_txt
        if sell_user_code is not None:
            self.sell_user_code = sell_user_code
        if sell_member_id is not None:
            self.sell_member_id = sell_member_id
        if sell_aggressor_indicator is not None:
            self.sell_aggressor_indicator = sell_aggressor_indicator
        if contract_id is not None:
            self.contract_id = contract_id
        if contract_name is not None:
            self.contract_name = contract_name
        if delivery_start is not None:
            self.delivery_start = delivery_start
        if delivery_end is not None:
            self.delivery_end = delivery_end
        if price is not None:
            self.price = price
        if quantity is not None:
            self.quantity = quantity
        if trade_details is not None:
            self.trade_details = trade_details
        if contract_details is not None:
            self.contract_details = contract_details

    @property
    def trade_id(self):
        """Gets the trade_id of this Trade.  # noqa: E501


        :return: The trade_id of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._trade_id

    @trade_id.setter
    def trade_id(self, trade_id):
        """Sets the trade_id of this Trade.


        :param trade_id: The trade_id of this Trade.  # noqa: E501
        :type: int
        """

        self._trade_id = trade_id

    @property
    def state(self):
        """Gets the state of this Trade.  # noqa: E501


        :return: The state of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Trade.


        :param state: The state of this Trade.  # noqa: E501
        :type: str
        """
        allowed_values = ["CNCL", "RREJ", "RGRA", "RREQ", "ACTI", "CREQ", "CREJ", "RSFA"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def delivery_area(self):
        """Gets the delivery_area of this Trade.  # noqa: E501


        :return: The delivery_area of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._delivery_area

    @delivery_area.setter
    def delivery_area(self, delivery_area):
        """Sets the delivery_area of this Trade.


        :param delivery_area: The delivery_area of this Trade.  # noqa: E501
        :type: str
        """

        self._delivery_area = delivery_area

    @property
    def api_timestamp(self):
        """Gets the api_timestamp of this Trade.  # noqa: E501


        :return: The api_timestamp of this Trade.  # noqa: E501
        :rtype: datetime
        """
        return self._api_timestamp

    @api_timestamp.setter
    def api_timestamp(self, api_timestamp):
        """Sets the api_timestamp of this Trade.


        :param api_timestamp: The api_timestamp of this Trade.  # noqa: E501
        :type: datetime
        """

        self._api_timestamp = api_timestamp

    @property
    def exec_time(self):
        """Gets the exec_time of this Trade.  # noqa: E501


        :return: The exec_time of this Trade.  # noqa: E501
        :rtype: datetime
        """
        return self._exec_time

    @exec_time.setter
    def exec_time(self, exec_time):
        """Sets the exec_time of this Trade.


        :param exec_time: The exec_time of this Trade.  # noqa: E501
        :type: datetime
        """

        self._exec_time = exec_time

    @property
    def buy(self):
        """Gets the buy of this Trade.  # noqa: E501


        :return: The buy of this Trade.  # noqa: E501
        :rtype: bool
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this Trade.


        :param buy: The buy of this Trade.  # noqa: E501
        :type: bool
        """

        self._buy = buy

    @property
    def sell(self):
        """Gets the sell of this Trade.  # noqa: E501


        :return: The sell of this Trade.  # noqa: E501
        :rtype: bool
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this Trade.


        :param sell: The sell of this Trade.  # noqa: E501
        :type: bool
        """

        self._sell = sell

    @property
    def buy_order_id(self):
        """Gets the buy_order_id of this Trade.  # noqa: E501


        :return: The buy_order_id of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._buy_order_id

    @buy_order_id.setter
    def buy_order_id(self, buy_order_id):
        """Sets the buy_order_id of this Trade.


        :param buy_order_id: The buy_order_id of this Trade.  # noqa: E501
        :type: int
        """

        self._buy_order_id = buy_order_id

    @property
    def buy_delivery_area(self):
        """Gets the buy_delivery_area of this Trade.  # noqa: E501


        :return: The buy_delivery_area of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._buy_delivery_area

    @buy_delivery_area.setter
    def buy_delivery_area(self, buy_delivery_area):
        """Sets the buy_delivery_area of this Trade.


        :param buy_delivery_area: The buy_delivery_area of this Trade.  # noqa: E501
        :type: str
        """

        self._buy_delivery_area = buy_delivery_area

    @property
    def buy_cl_oder_id(self):
        """Gets the buy_cl_oder_id of this Trade.  # noqa: E501


        :return: The buy_cl_oder_id of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._buy_cl_oder_id

    @buy_cl_oder_id.setter
    def buy_cl_oder_id(self, buy_cl_oder_id):
        """Sets the buy_cl_oder_id of this Trade.


        :param buy_cl_oder_id: The buy_cl_oder_id of this Trade.  # noqa: E501
        :type: str
        """

        self._buy_cl_oder_id = buy_cl_oder_id

    @property
    def buy_txt(self):
        """Gets the buy_txt of this Trade.  # noqa: E501


        :return: The buy_txt of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._buy_txt

    @buy_txt.setter
    def buy_txt(self, buy_txt):
        """Sets the buy_txt of this Trade.


        :param buy_txt: The buy_txt of this Trade.  # noqa: E501
        :type: str
        """

        self._buy_txt = buy_txt

    @property
    def buy_user_code(self):
        """Gets the buy_user_code of this Trade.  # noqa: E501


        :return: The buy_user_code of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._buy_user_code

    @buy_user_code.setter
    def buy_user_code(self, buy_user_code):
        """Sets the buy_user_code of this Trade.


        :param buy_user_code: The buy_user_code of this Trade.  # noqa: E501
        :type: str
        """

        self._buy_user_code = buy_user_code

    @property
    def buy_member_id(self):
        """Gets the buy_member_id of this Trade.  # noqa: E501


        :return: The buy_member_id of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._buy_member_id

    @buy_member_id.setter
    def buy_member_id(self, buy_member_id):
        """Sets the buy_member_id of this Trade.


        :param buy_member_id: The buy_member_id of this Trade.  # noqa: E501
        :type: str
        """

        self._buy_member_id = buy_member_id

    @property
    def buy_aggressor_indicator(self):
        """Gets the buy_aggressor_indicator of this Trade.  # noqa: E501


        :return: The buy_aggressor_indicator of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._buy_aggressor_indicator

    @buy_aggressor_indicator.setter
    def buy_aggressor_indicator(self, buy_aggressor_indicator):
        """Sets the buy_aggressor_indicator of this Trade.


        :param buy_aggressor_indicator: The buy_aggressor_indicator of this Trade.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", "U"]  # noqa: E501
        if buy_aggressor_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `buy_aggressor_indicator` ({0}), must be one of {1}"  # noqa: E501
                .format(buy_aggressor_indicator, allowed_values)
            )

        self._buy_aggressor_indicator = buy_aggressor_indicator

    @property
    def sell_order_id(self):
        """Gets the sell_order_id of this Trade.  # noqa: E501


        :return: The sell_order_id of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._sell_order_id

    @sell_order_id.setter
    def sell_order_id(self, sell_order_id):
        """Sets the sell_order_id of this Trade.


        :param sell_order_id: The sell_order_id of this Trade.  # noqa: E501
        :type: int
        """

        self._sell_order_id = sell_order_id

    @property
    def sell_delivery_area(self):
        """Gets the sell_delivery_area of this Trade.  # noqa: E501


        :return: The sell_delivery_area of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._sell_delivery_area

    @sell_delivery_area.setter
    def sell_delivery_area(self, sell_delivery_area):
        """Sets the sell_delivery_area of this Trade.


        :param sell_delivery_area: The sell_delivery_area of this Trade.  # noqa: E501
        :type: str
        """

        self._sell_delivery_area = sell_delivery_area

    @property
    def sell_cl_oder_id(self):
        """Gets the sell_cl_oder_id of this Trade.  # noqa: E501


        :return: The sell_cl_oder_id of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._sell_cl_oder_id

    @sell_cl_oder_id.setter
    def sell_cl_oder_id(self, sell_cl_oder_id):
        """Sets the sell_cl_oder_id of this Trade.


        :param sell_cl_oder_id: The sell_cl_oder_id of this Trade.  # noqa: E501
        :type: str
        """

        self._sell_cl_oder_id = sell_cl_oder_id

    @property
    def sell_txt(self):
        """Gets the sell_txt of this Trade.  # noqa: E501


        :return: The sell_txt of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._sell_txt

    @sell_txt.setter
    def sell_txt(self, sell_txt):
        """Sets the sell_txt of this Trade.


        :param sell_txt: The sell_txt of this Trade.  # noqa: E501
        :type: str
        """

        self._sell_txt = sell_txt

    @property
    def sell_user_code(self):
        """Gets the sell_user_code of this Trade.  # noqa: E501


        :return: The sell_user_code of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._sell_user_code

    @sell_user_code.setter
    def sell_user_code(self, sell_user_code):
        """Sets the sell_user_code of this Trade.


        :param sell_user_code: The sell_user_code of this Trade.  # noqa: E501
        :type: str
        """

        self._sell_user_code = sell_user_code

    @property
    def sell_member_id(self):
        """Gets the sell_member_id of this Trade.  # noqa: E501


        :return: The sell_member_id of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._sell_member_id

    @sell_member_id.setter
    def sell_member_id(self, sell_member_id):
        """Sets the sell_member_id of this Trade.


        :param sell_member_id: The sell_member_id of this Trade.  # noqa: E501
        :type: str
        """

        self._sell_member_id = sell_member_id

    @property
    def sell_aggressor_indicator(self):
        """Gets the sell_aggressor_indicator of this Trade.  # noqa: E501


        :return: The sell_aggressor_indicator of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._sell_aggressor_indicator

    @sell_aggressor_indicator.setter
    def sell_aggressor_indicator(self, sell_aggressor_indicator):
        """Sets the sell_aggressor_indicator of this Trade.


        :param sell_aggressor_indicator: The sell_aggressor_indicator of this Trade.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "N", "U"]  # noqa: E501
        if sell_aggressor_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `sell_aggressor_indicator` ({0}), must be one of {1}"  # noqa: E501
                .format(sell_aggressor_indicator, allowed_values)
            )

        self._sell_aggressor_indicator = sell_aggressor_indicator

    @property
    def contract_id(self):
        """Gets the contract_id of this Trade.  # noqa: E501


        :return: The contract_id of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this Trade.


        :param contract_id: The contract_id of this Trade.  # noqa: E501
        :type: int
        """

        self._contract_id = contract_id

    @property
    def contract_name(self):
        """Gets the contract_name of this Trade.  # noqa: E501


        :return: The contract_name of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._contract_name

    @contract_name.setter
    def contract_name(self, contract_name):
        """Sets the contract_name of this Trade.


        :param contract_name: The contract_name of this Trade.  # noqa: E501
        :type: str
        """

        self._contract_name = contract_name

    @property
    def delivery_start(self):
        """Gets the delivery_start of this Trade.  # noqa: E501


        :return: The delivery_start of this Trade.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_start

    @delivery_start.setter
    def delivery_start(self, delivery_start):
        """Sets the delivery_start of this Trade.


        :param delivery_start: The delivery_start of this Trade.  # noqa: E501
        :type: datetime
        """

        self._delivery_start = delivery_start

    @property
    def delivery_end(self):
        """Gets the delivery_end of this Trade.  # noqa: E501


        :return: The delivery_end of this Trade.  # noqa: E501
        :rtype: datetime
        """
        return self._delivery_end

    @delivery_end.setter
    def delivery_end(self, delivery_end):
        """Sets the delivery_end of this Trade.


        :param delivery_end: The delivery_end of this Trade.  # noqa: E501
        :type: datetime
        """

        self._delivery_end = delivery_end

    @property
    def price(self):
        """Gets the price of this Trade.  # noqa: E501


        :return: The price of this Trade.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Trade.


        :param price: The price of this Trade.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def quantity(self):
        """Gets the quantity of this Trade.  # noqa: E501


        :return: The quantity of this Trade.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Trade.


        :param quantity: The quantity of this Trade.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def trade_details(self):
        """Gets the trade_details of this Trade.  # noqa: E501


        :return: The trade_details of this Trade.  # noqa: E501
        :rtype: object
        """
        return self._trade_details

    @trade_details.setter
    def trade_details(self, trade_details):
        """Sets the trade_details of this Trade.


        :param trade_details: The trade_details of this Trade.  # noqa: E501
        :type: object
        """

        self._trade_details = trade_details

    @property
    def contract_details(self):
        """Gets the contract_details of this Trade.  # noqa: E501


        :return: The contract_details of this Trade.  # noqa: E501
        :rtype: object
        """
        return self._contract_details

    @contract_details.setter
    def contract_details(self, contract_details):
        """Sets the contract_details of this Trade.


        :param contract_details: The contract_details of this Trade.  # noqa: E501
        :type: object
        """

        self._contract_details = contract_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
