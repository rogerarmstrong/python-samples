# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_mod_type': 'str',
        'incl_pre_arranged': 'bool',
        'prod_name': 'list[str]'
    }

    attribute_map = {
        'order_mod_type': 'orderModType',
        'incl_pre_arranged': 'inclPreArranged',
        'prod_name': 'prodName'
    }

    def __init__(self, order_mod_type=None, incl_pre_arranged=None, prod_name=None):  # noqa: E501
        """UpdateStatus - a model defined in Swagger"""  # noqa: E501

        self._order_mod_type = None
        self._incl_pre_arranged = None
        self._prod_name = None
        self.discriminator = None

        if order_mod_type is not None:
            self.order_mod_type = order_mod_type
        if incl_pre_arranged is not None:
            self.incl_pre_arranged = incl_pre_arranged
        if prod_name is not None:
            self.prod_name = prod_name

    @property
    def order_mod_type(self):
        """Gets the order_mod_type of this UpdateStatus.  # noqa: E501


        :return: The order_mod_type of this UpdateStatus.  # noqa: E501
        :rtype: str
        """
        return self._order_mod_type

    @order_mod_type.setter
    def order_mod_type(self, order_mod_type):
        """Sets the order_mod_type of this UpdateStatus.


        :param order_mod_type: The order_mod_type of this UpdateStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACTI", "DEAC", "DELE"]  # noqa: E501
        if order_mod_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_mod_type` ({0}), must be one of {1}"  # noqa: E501
                .format(order_mod_type, allowed_values)
            )

        self._order_mod_type = order_mod_type

    @property
    def incl_pre_arranged(self):
        """Gets the incl_pre_arranged of this UpdateStatus.  # noqa: E501


        :return: The incl_pre_arranged of this UpdateStatus.  # noqa: E501
        :rtype: bool
        """
        return self._incl_pre_arranged

    @incl_pre_arranged.setter
    def incl_pre_arranged(self, incl_pre_arranged):
        """Sets the incl_pre_arranged of this UpdateStatus.


        :param incl_pre_arranged: The incl_pre_arranged of this UpdateStatus.  # noqa: E501
        :type: bool
        """

        self._incl_pre_arranged = incl_pre_arranged

    @property
    def prod_name(self):
        """Gets the prod_name of this UpdateStatus.  # noqa: E501


        :return: The prod_name of this UpdateStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._prod_name

    @prod_name.setter
    def prod_name(self, prod_name):
        """Sets the prod_name of this UpdateStatus.


        :param prod_name: The prod_name of this UpdateStatus.  # noqa: E501
        :type: list[str]
        """

        self._prod_name = prod_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
