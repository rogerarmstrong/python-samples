# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'msg_id': 'int',
        'type': 'str',
        'code': 'int',
        'epex_timestamp': 'datetime',
        'api_timestamp': 'datetime',
        'text': 'str',
        'severity': 'str'
    }

    attribute_map = {
        'msg_id': 'msg_id',
        'type': 'type',
        'code': 'code',
        'epex_timestamp': 'epex_timestamp',
        'api_timestamp': 'api_timestamp',
        'text': 'text',
        'severity': 'severity'
    }

    def __init__(self, msg_id=None, type=None, code=None, epex_timestamp=None, api_timestamp=None, text=None, severity=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501

        self._msg_id = None
        self._type = None
        self._code = None
        self._epex_timestamp = None
        self._api_timestamp = None
        self._text = None
        self._severity = None
        self.discriminator = None

        if msg_id is not None:
            self.msg_id = msg_id
        if type is not None:
            self.type = type
        if code is not None:
            self.code = code
        if epex_timestamp is not None:
            self.epex_timestamp = epex_timestamp
        if api_timestamp is not None:
            self.api_timestamp = api_timestamp
        if text is not None:
            self.text = text
        if severity is not None:
            self.severity = severity

    @property
    def msg_id(self):
        """Gets the msg_id of this Notification.  # noqa: E501


        :return: The msg_id of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._msg_id

    @msg_id.setter
    def msg_id(self, msg_id):
        """Sets the msg_id of this Notification.


        :param msg_id: The msg_id of this Notification.  # noqa: E501
        :type: int
        """

        self._msg_id = msg_id

    @property
    def type(self):
        """Gets the type of this Notification.  # noqa: E501


        :return: The type of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Notification.


        :param type: The type of this Notification.  # noqa: E501
        :type: str
        """
        allowed_values = ["PUBLIC", "PRIVATE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def code(self):
        """Gets the code of this Notification.  # noqa: E501


        :return: The code of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Notification.


        :param code: The code of this Notification.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def epex_timestamp(self):
        """Gets the epex_timestamp of this Notification.  # noqa: E501


        :return: The epex_timestamp of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._epex_timestamp

    @epex_timestamp.setter
    def epex_timestamp(self, epex_timestamp):
        """Sets the epex_timestamp of this Notification.


        :param epex_timestamp: The epex_timestamp of this Notification.  # noqa: E501
        :type: datetime
        """

        self._epex_timestamp = epex_timestamp

    @property
    def api_timestamp(self):
        """Gets the api_timestamp of this Notification.  # noqa: E501


        :return: The api_timestamp of this Notification.  # noqa: E501
        :rtype: datetime
        """
        return self._api_timestamp

    @api_timestamp.setter
    def api_timestamp(self, api_timestamp):
        """Sets the api_timestamp of this Notification.


        :param api_timestamp: The api_timestamp of this Notification.  # noqa: E501
        :type: datetime
        """

        self._api_timestamp = api_timestamp

    @property
    def text(self):
        """Gets the text of this Notification.  # noqa: E501


        :return: The text of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Notification.


        :param text: The text of this Notification.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def severity(self):
        """Gets the severity of this Notification.  # noqa: E501


        :return: The severity of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Notification.


        :param severity: The severity of this Notification.  # noqa: E501
        :type: str
        """

        self._severity = severity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
