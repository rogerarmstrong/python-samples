# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powerbot.api_client import ApiClient


class OrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_order(self, order, **kwargs):  # noqa: E501
        """Places new orders  # noqa: E501

        Allows you to place a new order (sell / bid). If you know your contractId you can use it, alternatively you can use the contractName (i.e. 14-15 for an interday product) to find the currently active contract for the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_order(order, async=True)
        >>> result = thread.get()

        :param async bool
        :param OrderEntry order: (required)
        :return: OwnOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_order_with_http_info(order, **kwargs)  # noqa: E501
        else:
            (data) = self.add_order_with_http_info(order, **kwargs)  # noqa: E501
            return data

    def add_order_with_http_info(self, order, **kwargs):  # noqa: E501
        """Places new orders  # noqa: E501

        Allows you to place a new order (sell / bid). If you know your contractId you can use it, alternatively you can use the contractName (i.e. 14-15 for an interday product) to find the currently active contract for the product.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_order_with_http_info(order, async=True)
        >>> result = thread.get()

        :param async bool
        :param OrderEntry order: (required)
        :return: OwnOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order' is set
        if ('order' not in params or
                params['order'] is None):
            raise ValueError("Missing the required parameter `order` when calling `add_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'order' in params:
            body_params = params['order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/orders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OwnOrder',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order_book(self, product, **kwargs):  # noqa: E501
        """Retrieves the public order book (sorted by delivery ascending)  # noqa: E501

        Shows contracts for the selected product and delivery area with active bids / asks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_order_book(product, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product: (required)
        :param bool with_bid_or_ask_only: If set to true, the returned orderbook will contain only contracts which contain at least one active bid or ask
        :param int contract_id: limit the orderbook to a certain contract only
        :param str contract_name: limit the orderbook to a certain contract name only
        :param datetime delivery_start: limit the orderbook to those contracts with the given delivery start date
        :param datetime delivery_end: limit the orderbook to those contracts with the given delivery end date
        :param datetime delivery_within: limit the orderbook to those contracts having a delivery start/end date which starts before and ends after the given parameter
        :param int limit: Limits the number of returned order books
        :return: OrderBook
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_order_book_with_http_info(product, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_book_with_http_info(product, **kwargs)  # noqa: E501
            return data

    def get_order_book_with_http_info(self, product, **kwargs):  # noqa: E501
        """Retrieves the public order book (sorted by delivery ascending)  # noqa: E501

        Shows contracts for the selected product and delivery area with active bids / asks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_order_book_with_http_info(product, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product: (required)
        :param bool with_bid_or_ask_only: If set to true, the returned orderbook will contain only contracts which contain at least one active bid or ask
        :param int contract_id: limit the orderbook to a certain contract only
        :param str contract_name: limit the orderbook to a certain contract name only
        :param datetime delivery_start: limit the orderbook to those contracts with the given delivery start date
        :param datetime delivery_end: limit the orderbook to those contracts with the given delivery end date
        :param datetime delivery_within: limit the orderbook to those contracts having a delivery start/end date which starts before and ends after the given parameter
        :param int limit: Limits the number of returned order books
        :return: OrderBook
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product', 'with_bid_or_ask_only', 'contract_id', 'contract_name', 'delivery_start', 'delivery_end', 'delivery_within', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_book" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product' is set
        if ('product' not in params or
                params['product'] is None):
            raise ValueError("Missing the required parameter `product` when calling `get_order_book`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product' in params:
            path_params['product'] = params['product']  # noqa: E501

        query_params = []
        if 'with_bid_or_ask_only' in params:
            query_params.append(('with_bid_or_ask_only', params['with_bid_or_ask_only']))  # noqa: E501
        if 'contract_id' in params:
            query_params.append(('contractId', params['contract_id']))  # noqa: E501
        if 'contract_name' in params:
            query_params.append(('contractName', params['contract_name']))  # noqa: E501
        if 'delivery_start' in params:
            query_params.append(('delivery_start', params['delivery_start']))  # noqa: E501
        if 'delivery_end' in params:
            query_params.append(('delivery_end', params['delivery_end']))  # noqa: E501
        if 'delivery_within' in params:
            query_params.append(('delivery_within', params['delivery_within']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/orderbook/{product}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrderBook',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_own_orders(self, **kwargs):  # noqa: E501
        """Lists the own orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_own_orders(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: Offset when loading a list of items
        :param int limit: Limits the number of loaded items
        :param int contract_id: Show only those orders related to a specific contract
        :param bool active_only: Returns only those orders which are active
        :return: list[OwnOrder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_own_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_own_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_own_orders_with_http_info(self, **kwargs):  # noqa: E501
        """Lists the own orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_own_orders_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: Offset when loading a list of items
        :param int limit: Limits the number of loaded items
        :param int contract_id: Show only those orders related to a specific contract
        :param bool active_only: Returns only those orders which are active
        :return: list[OwnOrder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'contract_id', 'active_only']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_own_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'contract_id' in params:
            query_params.append(('contract_id', params['contract_id']))  # noqa: E501
        if 'active_only' in params:
            query_params.append(('active_only', params['active_only']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OwnOrder]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_order(self, order_id, **kwargs):  # noqa: E501
        """Modifies an existing order  # noqa: E501

        You don't have to provide a revisionNo, the API will find the latest revisionNo for the provided orderIds for you.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_order(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int order_id: (required)
        :param OrderModify modifications:
        :return: list[OwnOrder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.modify_order_with_http_info(order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_order_with_http_info(order_id, **kwargs)  # noqa: E501
            return data

    def modify_order_with_http_info(self, order_id, **kwargs):  # noqa: E501
        """Modifies an existing order  # noqa: E501

        You don't have to provide a revisionNo, the API will find the latest revisionNo for the provided orderIds for you.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.modify_order_with_http_info(order_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int order_id: (required)
        :param OrderModify modifications:
        :return: list[OwnOrder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['order_id', 'modifications']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'order_id' is set
        if ('order_id' not in params or
                params['order_id'] is None):
            raise ValueError("Missing the required parameter `order_id` when calling `modify_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'order_id' in params:
            path_params['order_id'] = params['order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'modifications' in params:
            body_params = params['modifications']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/order/{order_id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OwnOrder]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_status(self, orders, **kwargs):  # noqa: E501
        """Updates the status of all own orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_status(orders, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateStatus orders: (required)
        :return: list[OwnOrder]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_status_with_http_info(orders, **kwargs)  # noqa: E501
        else:
            (data) = self.update_status_with_http_info(orders, **kwargs)  # noqa: E501
            return data

    def update_status_with_http_info(self, orders, **kwargs):  # noqa: E501
        """Updates the status of all own orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_status_with_http_info(orders, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateStatus orders: (required)
        :return: list[OwnOrder]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['orders']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'orders' is set
        if ('orders' not in params or
                params['orders'] is None):
            raise ValueError("Missing the required parameter `orders` when calling `update_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'orders' in params:
            body_params = params['orders']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/orders/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[OwnOrder]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
