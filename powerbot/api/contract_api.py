# coding: utf-8

"""
    Powerbot Server

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.5
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from powerbot.api_client import ApiClient


class ContractApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def find_contracts(self, **kwargs):  # noqa: E501
        """Finding contracts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_contracts(async=True)
        >>> result = thread.get()

        :param async bool
        :param int contract_id:
        :param datetime delivery_start:
        :param datetime delivery_end:
        :return: list[ContractItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.find_contracts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.find_contracts_with_http_info(**kwargs)  # noqa: E501
            return data

    def find_contracts_with_http_info(self, **kwargs):  # noqa: E501
        """Finding contracts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.find_contracts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int contract_id:
        :param datetime delivery_start:
        :param datetime delivery_end:
        :return: list[ContractItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'delivery_start', 'delivery_end']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_contracts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'contract_id' in params:
            query_params.append(('contract_id', params['contract_id']))  # noqa: E501
        if 'delivery_start' in params:
            query_params.append(('delivery_start', params['delivery_start']))  # noqa: E501
        if 'delivery_end' in params:
            query_params.append(('delivery_end', params['delivery_end']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/contracts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractItem]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_contract_history(self, contract_id, **kwargs):  # noqa: E501
        """Retrieves the history about the contract  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_contract_history(contract_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int contract_id: (required)
        :param int from_revision: Revisions start with 0, each change increments it by 1
        :return: list[ContractHistoryItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_contract_history_with_http_info(contract_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_contract_history_with_http_info(contract_id, **kwargs)  # noqa: E501
            return data

    def get_contract_history_with_http_info(self, contract_id, **kwargs):  # noqa: E501
        """Retrieves the history about the contract  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_contract_history_with_http_info(contract_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int contract_id: (required)
        :param int from_revision: Revisions start with 0, each change increments it by 1
        :return: list[ContractHistoryItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'from_revision']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_contract_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if ('contract_id' not in params or
                params['contract_id'] is None):
            raise ValueError("Missing the required parameter `contract_id` when calling `get_contract_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501

        query_params = []
        if 'from_revision' in params:
            query_params.append(('from_revision', params['from_revision']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/contract/{contract_id}/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ContractHistoryItem]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_orders(self, contract_id, **kwargs):  # noqa: E501
        """Retrieves the current bids and asks of the contract  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_orders(contract_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int contract_id: (required)
        :return: Orders
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_orders_with_http_info(contract_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_orders_with_http_info(contract_id, **kwargs)  # noqa: E501
            return data

    def get_orders_with_http_info(self, contract_id, **kwargs):  # noqa: E501
        """Retrieves the current bids and asks of the contract  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_orders_with_http_info(contract_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int contract_id: (required)
        :return: Orders
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if ('contract_id' not in params or
                params['contract_id'] is None):
            raise ValueError("Missing the required parameter `contract_id` when calling `get_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/contract/{contract_id}/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Orders',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_public_trades(self, contract_id, **kwargs):  # noqa: E501
        """Retrieves the public trades for the contract  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_public_trades(contract_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int contract_id: (required)
        :param int offset: Offset when loading a list of items
        :param int limit: Limits the number of loaded items
        :param datetime from_api_timestamp: from timestamp is 'inclusive' (i.e. >=)
        :param datetime to_api_timestamp: to timestamp is 'exclusive' (i.e. <)
        :return: list[PublicTrade]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_public_trades_with_http_info(contract_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_public_trades_with_http_info(contract_id, **kwargs)  # noqa: E501
            return data

    def get_public_trades_with_http_info(self, contract_id, **kwargs):  # noqa: E501
        """Retrieves the public trades for the contract  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_public_trades_with_http_info(contract_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int contract_id: (required)
        :param int offset: Offset when loading a list of items
        :param int limit: Limits the number of loaded items
        :param datetime from_api_timestamp: from timestamp is 'inclusive' (i.e. >=)
        :param datetime to_api_timestamp: to timestamp is 'exclusive' (i.e. <)
        :return: list[PublicTrade]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['contract_id', 'offset', 'limit', 'from_api_timestamp', 'to_api_timestamp']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_public_trades" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'contract_id' is set
        if ('contract_id' not in params or
                params['contract_id'] is None):
            raise ValueError("Missing the required parameter `contract_id` when calling `get_public_trades`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'contract_id' in params:
            path_params['contract_id'] = params['contract_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'from_api_timestamp' in params:
            query_params.append(('from_api_timestamp', params['from_api_timestamp']))  # noqa: E501
        if 'to_api_timestamp' in params:
            query_params.append(('to_api_timestamp', params['to_api_timestamp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key_security']  # noqa: E501

        return self.api_client.call_api(
            '/contract/{contract_id}/publictrades', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PublicTrade]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
